ARM GAS  /tmp/ccaBVCfC.s 			page 1


   1              		.cpu cortex-m0
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 0
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.MX_GPIO_Init,"ax",%progbits
  16              		.align	1
  17              		.syntax unified
  18              		.code	16
  19              		.thumb_func
  20              		.fpu softvfp
  22              	MX_GPIO_Init:
  23              	.LFB43:
  24              		.file 1 "Src/main.c"
   1:Src/main.c    **** /* USER CODE BEGIN Header */
   2:Src/main.c    **** /**
   3:Src/main.c    ****   ******************************************************************************
   4:Src/main.c    ****   * @file           : main.c
   5:Src/main.c    ****   * @brief          : Main program body
   6:Src/main.c    ****   ******************************************************************************
   7:Src/main.c    ****   * @attention
   8:Src/main.c    ****   *
   9:Src/main.c    ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  10:Src/main.c    ****   * All rights reserved.</center></h2>
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Src/main.c    ****   * the "License"; You may not use this file except in compliance with the
  14:Src/main.c    ****   * License. You may obtain a copy of the License at:
  15:Src/main.c    ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Src/main.c    ****   *
  17:Src/main.c    ****   ******************************************************************************
  18:Src/main.c    ****   */
  19:Src/main.c    **** /* USER CODE END Header */
  20:Src/main.c    **** 
  21:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  22:Src/main.c    **** #include "main.h"
  23:Src/main.c    **** #include "stm32f0xx_hal.h"
  24:Src/main.c    **** #include "stm32f0xx_hal_spi.h"
  25:Src/main.c    **** #include <stdint.h>
  26:Src/main.c    **** 
  27:Src/main.c    **** /* Private includes ----------------------------------------------------------*/
  28:Src/main.c    **** /* USER CODE BEGIN Includes */
  29:Src/main.c    **** #include <stdbool.h>
  30:Src/main.c    **** #include "nRF24L01.h"
  31:Src/main.c    **** /* USER CODE END Includes */
  32:Src/main.c    **** 
  33:Src/main.c    **** /* Private typedef -----------------------------------------------------------*/
  34:Src/main.c    **** /* USER CODE BEGIN PTD */
ARM GAS  /tmp/ccaBVCfC.s 			page 2


  35:Src/main.c    **** 
  36:Src/main.c    **** /* USER CODE END PTD */
  37:Src/main.c    **** 
  38:Src/main.c    **** /* Private define ------------------------------------------------------------*/
  39:Src/main.c    **** /* USER CODE BEGIN PD */
  40:Src/main.c    **** /* USER CODE END PD */
  41:Src/main.c    **** 
  42:Src/main.c    **** /* Private macro -------------------------------------------------------------*/
  43:Src/main.c    **** /* USER CODE BEGIN PM */
  44:Src/main.c    **** 
  45:Src/main.c    **** /* USER CODE END PM */
  46:Src/main.c    **** 
  47:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  48:Src/main.c    **** SPI_HandleTypeDef hspi1;
  49:Src/main.c    **** 
  50:Src/main.c    **** /* USER CODE BEGIN PV */
  51:Src/main.c    **** bool rf_begin(void);
  52:Src/main.c    **** /* USER CODE END PV */
  53:Src/main.c    **** 
  54:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  55:Src/main.c    **** void SystemClock_Config(void);
  56:Src/main.c    **** static void MX_GPIO_Init(void);
  57:Src/main.c    **** static void MX_SPI1_Init(void);
  58:Src/main.c    **** /* USER CODE BEGIN PFP */
  59:Src/main.c    **** 
  60:Src/main.c    **** /* USER CODE END PFP */
  61:Src/main.c    **** 
  62:Src/main.c    **** /* Private user code ---------------------------------------------------------*/
  63:Src/main.c    **** /* USER CODE BEGIN 0 */
  64:Src/main.c    **** 
  65:Src/main.c    **** /* USER CODE END 0 */
  66:Src/main.c    **** 
  67:Src/main.c    **** /**
  68:Src/main.c    ****   * @brief  The application entry point.
  69:Src/main.c    ****   * @retval int
  70:Src/main.c    ****   */
  71:Src/main.c    **** int main(void)
  72:Src/main.c    **** {
  73:Src/main.c    ****   /* USER CODE BEGIN 1 */
  74:Src/main.c    **** 
  75:Src/main.c    ****   /* USER CODE END 1 */
  76:Src/main.c    **** 
  77:Src/main.c    ****   /* MCU Configuration--------------------------------------------------------*/
  78:Src/main.c    **** 
  79:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  80:Src/main.c    ****   HAL_Init();
  81:Src/main.c    **** 
  82:Src/main.c    ****   /* USER CODE BEGIN Init */
  83:Src/main.c    **** 
  84:Src/main.c    ****   /* USER CODE END Init */
  85:Src/main.c    **** 
  86:Src/main.c    ****   /* Configure the system clock */
  87:Src/main.c    ****   SystemClock_Config();
  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE BEGIN SysInit */
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE END SysInit */
ARM GAS  /tmp/ccaBVCfC.s 			page 3


  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Initialize all configured peripherals */
  94:Src/main.c    ****   MX_GPIO_Init();
  95:Src/main.c    ****   MX_SPI1_Init();
  96:Src/main.c    ****   /* USER CODE BEGIN 2 */
  97:Src/main.c    ****   rf_begin();
  98:Src/main.c    ****   /* USER CODE END 2 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Infinite loop */
 101:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 102:Src/main.c    ****   while (1)
 103:Src/main.c    ****   {
 104:Src/main.c    ****     /* USER CODE END WHILE */
 105:Src/main.c    **** 
 106:Src/main.c    ****     /* USER CODE BEGIN 3 */
 107:Src/main.c    ****   }
 108:Src/main.c    ****   /* USER CODE END 3 */
 109:Src/main.c    **** }
 110:Src/main.c    **** 
 111:Src/main.c    **** /**
 112:Src/main.c    ****   * @brief System Clock Configuration
 113:Src/main.c    ****   * @retval None
 114:Src/main.c    ****   */
 115:Src/main.c    **** void SystemClock_Config(void)
 116:Src/main.c    **** {
 117:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 118:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 119:Src/main.c    **** 
 120:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 121:Src/main.c    ****   */
 122:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 123:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 124:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 125:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 126:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 127:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 128:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 129:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 130:Src/main.c    ****   {
 131:Src/main.c    ****     Error_Handler();
 132:Src/main.c    ****   }
 133:Src/main.c    ****   /** Initializes the CPU, AHB and APB busses clocks 
 134:Src/main.c    ****   */
 135:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 136:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 137:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 138:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 139:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 140:Src/main.c    **** 
 141:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 142:Src/main.c    ****   {
 143:Src/main.c    ****     Error_Handler();
 144:Src/main.c    ****   }
 145:Src/main.c    **** }
 146:Src/main.c    **** 
 147:Src/main.c    **** /**
 148:Src/main.c    ****   * @brief SPI1 Initialization Function
ARM GAS  /tmp/ccaBVCfC.s 			page 4


 149:Src/main.c    ****   * @param None
 150:Src/main.c    ****   * @retval None
 151:Src/main.c    ****   */
 152:Src/main.c    **** static void MX_SPI1_Init(void)
 153:Src/main.c    **** {
 154:Src/main.c    **** 
 155:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 0 */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE END SPI1_Init 0 */
 158:Src/main.c    **** 
 159:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 1 */
 160:Src/main.c    **** 
 161:Src/main.c    ****   /* USER CODE END SPI1_Init 1 */
 162:Src/main.c    ****   /* SPI1 parameter configuration*/
 163:Src/main.c    ****   hspi1.Instance = SPI1;
 164:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 165:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 166:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 167:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 168:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 169:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 170:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 171:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 172:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 173:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 174:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 175:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 176:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 177:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 178:Src/main.c    ****   {
 179:Src/main.c    ****     Error_Handler();
 180:Src/main.c    ****   }
 181:Src/main.c    ****   /* USER CODE BEGIN SPI1_Init 2 */
 182:Src/main.c    **** 
 183:Src/main.c    ****   /* USER CODE END SPI1_Init 2 */
 184:Src/main.c    **** 
 185:Src/main.c    **** }
 186:Src/main.c    **** 
 187:Src/main.c    **** /**
 188:Src/main.c    ****   * @brief GPIO Initialization Function
 189:Src/main.c    ****   * @param None
 190:Src/main.c    ****   * @retval None
 191:Src/main.c    ****   */
 192:Src/main.c    **** static void MX_GPIO_Init(void)
 193:Src/main.c    **** {
  25              		.loc 1 193 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 32
  28              		@ frame_needed = 0, uses_anonymous_args = 0
  29 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
ARM GAS  /tmp/ccaBVCfC.s 			page 5


  37 0002 89B0     		sub	sp, sp, #36
  38              	.LCFI1:
  39              		.cfi_def_cfa_offset 56
 194:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  40              		.loc 1 194 0
  41 0004 1422     		movs	r2, #20
  42 0006 0021     		movs	r1, #0
  43 0008 03A8     		add	r0, sp, #12
  44 000a FFF7FEFF 		bl	memset
  45              	.LVL0:
  46              	.LBB2:
 195:Src/main.c    **** 
 196:Src/main.c    ****   /* GPIO Ports Clock Enable */
 197:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  47              		.loc 1 197 0
  48 000e 184B     		ldr	r3, .L2
  49 0010 5969     		ldr	r1, [r3, #20]
  50 0012 8020     		movs	r0, #128
  51 0014 8002     		lsls	r0, r0, #10
  52 0016 0143     		orrs	r1, r0
  53 0018 5961     		str	r1, [r3, #20]
  54 001a 5A69     		ldr	r2, [r3, #20]
  55 001c 0240     		ands	r2, r0
  56 001e 0192     		str	r2, [sp, #4]
  57 0020 019A     		ldr	r2, [sp, #4]
  58              	.LBE2:
  59              	.LBB3:
 198:Src/main.c    ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  60              		.loc 1 198 0
  61 0022 5A69     		ldr	r2, [r3, #20]
  62 0024 8021     		movs	r1, #128
  63 0026 0903     		lsls	r1, r1, #12
  64 0028 0A43     		orrs	r2, r1
  65 002a 5A61     		str	r2, [r3, #20]
  66 002c 5B69     		ldr	r3, [r3, #20]
  67 002e 0B40     		ands	r3, r1
  68 0030 0293     		str	r3, [sp, #8]
  69 0032 029B     		ldr	r3, [sp, #8]
  70              	.LBE3:
 199:Src/main.c    **** 
 200:Src/main.c    ****   /*Configure GPIO pin Output Level */
 201:Src/main.c    ****   HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
  71              		.loc 1 201 0
  72 0034 C027     		movs	r7, #192
  73 0036 BF00     		lsls	r7, r7, #2
  74 0038 0E4D     		ldr	r5, .L2+4
  75 003a 0022     		movs	r2, #0
  76 003c 3900     		movs	r1, r7
  77 003e 2800     		movs	r0, r5
  78 0040 FFF7FEFF 		bl	HAL_GPIO_WritePin
  79              	.LVL1:
 202:Src/main.c    **** 
 203:Src/main.c    ****   /*Configure GPIO pin : B1_Pin */
 204:Src/main.c    ****   GPIO_InitStruct.Pin = B1_Pin;
  80              		.loc 1 204 0
  81 0044 0126     		movs	r6, #1
  82 0046 0396     		str	r6, [sp, #12]
ARM GAS  /tmp/ccaBVCfC.s 			page 6


 205:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  83              		.loc 1 205 0
  84 0048 0B4B     		ldr	r3, .L2+8
  85 004a 0493     		str	r3, [sp, #16]
 206:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  86              		.loc 1 206 0
  87 004c 0024     		movs	r4, #0
  88 004e 0594     		str	r4, [sp, #20]
 207:Src/main.c    ****   HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
  89              		.loc 1 207 0
  90 0050 9020     		movs	r0, #144
  91 0052 03A9     		add	r1, sp, #12
  92 0054 C005     		lsls	r0, r0, #23
  93 0056 FFF7FEFF 		bl	HAL_GPIO_Init
  94              	.LVL2:
 208:Src/main.c    **** 
 209:Src/main.c    ****   /*Configure GPIO pins : LD4_Pin LD3_Pin */
 210:Src/main.c    ****   GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
  95              		.loc 1 210 0
  96 005a 0397     		str	r7, [sp, #12]
 211:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  97              		.loc 1 211 0
  98 005c 0496     		str	r6, [sp, #16]
 212:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  99              		.loc 1 212 0
 100 005e 0594     		str	r4, [sp, #20]
 213:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 101              		.loc 1 213 0
 102 0060 0694     		str	r4, [sp, #24]
 214:Src/main.c    ****   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 103              		.loc 1 214 0
 104 0062 03A9     		add	r1, sp, #12
 105 0064 2800     		movs	r0, r5
 106 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 107              	.LVL3:
 215:Src/main.c    **** 
 216:Src/main.c    **** }
 108              		.loc 1 216 0
 109 006a 09B0     		add	sp, sp, #36
 110              		@ sp needed
 111 006c F0BD     		pop	{r4, r5, r6, r7, pc}
 112              	.L3:
 113 006e C046     		.align	2
 114              	.L2:
 115 0070 00100240 		.word	1073876992
 116 0074 00080048 		.word	1207961600
 117 0078 00001210 		.word	269615104
 118              		.cfi_endproc
 119              	.LFE43:
 121              		.section	.text.MX_SPI1_Init,"ax",%progbits
 122              		.align	1
 123              		.syntax unified
 124              		.code	16
 125              		.thumb_func
 126              		.fpu softvfp
 128              	MX_SPI1_Init:
 129              	.LFB42:
ARM GAS  /tmp/ccaBVCfC.s 			page 7


 153:Src/main.c    **** 
 130              		.loc 1 153 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134 0000 10B5     		push	{r4, lr}
 135              	.LCFI2:
 136              		.cfi_def_cfa_offset 8
 137              		.cfi_offset 4, -8
 138              		.cfi_offset 14, -4
 163:Src/main.c    ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 139              		.loc 1 163 0
 140 0002 0E48     		ldr	r0, .L5
 141 0004 0E4B     		ldr	r3, .L5+4
 142 0006 0360     		str	r3, [r0]
 164:Src/main.c    ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 143              		.loc 1 164 0
 144 0008 8223     		movs	r3, #130
 145 000a 5B00     		lsls	r3, r3, #1
 146 000c 4360     		str	r3, [r0, #4]
 165:Src/main.c    ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 147              		.loc 1 165 0
 148 000e 0023     		movs	r3, #0
 149 0010 8360     		str	r3, [r0, #8]
 166:Src/main.c    ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 150              		.loc 1 166 0
 151 0012 E022     		movs	r2, #224
 152 0014 D200     		lsls	r2, r2, #3
 153 0016 C260     		str	r2, [r0, #12]
 167:Src/main.c    ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 154              		.loc 1 167 0
 155 0018 0361     		str	r3, [r0, #16]
 168:Src/main.c    ****   hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 156              		.loc 1 168 0
 157 001a 4361     		str	r3, [r0, #20]
 169:Src/main.c    ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 158              		.loc 1 169 0
 159 001c 8022     		movs	r2, #128
 160 001e D202     		lsls	r2, r2, #11
 161 0020 8261     		str	r2, [r0, #24]
 170:Src/main.c    ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 162              		.loc 1 170 0
 163 0022 3822     		movs	r2, #56
 164 0024 C261     		str	r2, [r0, #28]
 171:Src/main.c    ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 165              		.loc 1 171 0
 166 0026 0362     		str	r3, [r0, #32]
 172:Src/main.c    ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 167              		.loc 1 172 0
 168 0028 4362     		str	r3, [r0, #36]
 173:Src/main.c    ****   hspi1.Init.CRCPolynomial = 7;
 169              		.loc 1 173 0
 170 002a 8362     		str	r3, [r0, #40]
 174:Src/main.c    ****   hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 171              		.loc 1 174 0
 172 002c 313A     		subs	r2, r2, #49
 173 002e C262     		str	r2, [r0, #44]
ARM GAS  /tmp/ccaBVCfC.s 			page 8


 175:Src/main.c    ****   hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 174              		.loc 1 175 0
 175 0030 0363     		str	r3, [r0, #48]
 176:Src/main.c    ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 176              		.loc 1 176 0
 177 0032 0833     		adds	r3, r3, #8
 178 0034 4363     		str	r3, [r0, #52]
 177:Src/main.c    ****   {
 179              		.loc 1 177 0
 180 0036 FFF7FEFF 		bl	HAL_SPI_Init
 181              	.LVL4:
 185:Src/main.c    **** 
 182              		.loc 1 185 0
 183              		@ sp needed
 184 003a 10BD     		pop	{r4, pc}
 185              	.L6:
 186              		.align	2
 187              	.L5:
 188 003c 00000000 		.word	hspi1
 189 0040 00300140 		.word	1073819648
 190              		.cfi_endproc
 191              	.LFE42:
 193              		.section	.text.SystemClock_Config,"ax",%progbits
 194              		.align	1
 195              		.global	SystemClock_Config
 196              		.syntax unified
 197              		.code	16
 198              		.thumb_func
 199              		.fpu softvfp
 201              	SystemClock_Config:
 202              	.LFB41:
 116:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 203              		.loc 1 116 0
 204              		.cfi_startproc
 205              		@ args = 0, pretend = 0, frame = 64
 206              		@ frame_needed = 0, uses_anonymous_args = 0
 207 0000 10B5     		push	{r4, lr}
 208              	.LCFI3:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 4, -8
 211              		.cfi_offset 14, -4
 212 0002 90B0     		sub	sp, sp, #64
 213              	.LCFI4:
 214              		.cfi_def_cfa_offset 72
 117:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 215              		.loc 1 117 0
 216 0004 2C22     		movs	r2, #44
 217 0006 0021     		movs	r1, #0
 218 0008 05A8     		add	r0, sp, #20
 219 000a FFF7FEFF 		bl	memset
 220              	.LVL5:
 118:Src/main.c    **** 
 221              		.loc 1 118 0
 222 000e 1022     		movs	r2, #16
 223 0010 0021     		movs	r1, #0
 224 0012 6846     		mov	r0, sp
 225 0014 FFF7FEFF 		bl	memset
ARM GAS  /tmp/ccaBVCfC.s 			page 9


 226              	.LVL6:
 122:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 227              		.loc 1 122 0
 228 0018 0224     		movs	r4, #2
 229 001a 0494     		str	r4, [sp, #16]
 123:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 230              		.loc 1 123 0
 231 001c 0123     		movs	r3, #1
 232 001e 0793     		str	r3, [sp, #28]
 124:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 233              		.loc 1 124 0
 234 0020 0F33     		adds	r3, r3, #15
 235 0022 0893     		str	r3, [sp, #32]
 125:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 236              		.loc 1 125 0
 237 0024 0C94     		str	r4, [sp, #48]
 127:Src/main.c    ****   RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 238              		.loc 1 127 0
 239 0026 A023     		movs	r3, #160
 240 0028 9B03     		lsls	r3, r3, #14
 241 002a 0E93     		str	r3, [sp, #56]
 129:Src/main.c    ****   {
 242              		.loc 1 129 0
 243 002c 04A8     		add	r0, sp, #16
 244 002e FFF7FEFF 		bl	HAL_RCC_OscConfig
 245              	.LVL7:
 135:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1;
 246              		.loc 1 135 0
 247 0032 0723     		movs	r3, #7
 248 0034 0093     		str	r3, [sp]
 137:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 249              		.loc 1 137 0
 250 0036 0194     		str	r4, [sp, #4]
 138:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 251              		.loc 1 138 0
 252 0038 0023     		movs	r3, #0
 253 003a 0293     		str	r3, [sp, #8]
 139:Src/main.c    **** 
 254              		.loc 1 139 0
 255 003c 0393     		str	r3, [sp, #12]
 141:Src/main.c    ****   {
 256              		.loc 1 141 0
 257 003e 0121     		movs	r1, #1
 258 0040 6846     		mov	r0, sp
 259 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 260              	.LVL8:
 145:Src/main.c    **** 
 261              		.loc 1 145 0
 262 0046 10B0     		add	sp, sp, #64
 263              		@ sp needed
 264 0048 10BD     		pop	{r4, pc}
 265              		.cfi_endproc
 266              	.LFE41:
 268              		.section	.text.write_register,"ax",%progbits
 269              		.align	1
 270              		.global	write_register
 271              		.syntax unified
ARM GAS  /tmp/ccaBVCfC.s 			page 10


 272              		.code	16
 273              		.thumb_func
 274              		.fpu softvfp
 276              	write_register:
 277              	.LFB44:
 217:Src/main.c    **** 
 218:Src/main.c    **** /* USER CODE BEGIN 4 */
 219:Src/main.c    **** 
 220:Src/main.c    **** uint8_t write_register(uint8_t reg, uint8_t value)
 221:Src/main.c    **** {
 278              		.loc 1 221 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 8
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              	.LVL9:
 283 0000 30B5     		push	{r4, r5, lr}
 284              	.LCFI5:
 285              		.cfi_def_cfa_offset 12
 286              		.cfi_offset 4, -12
 287              		.cfi_offset 5, -8
 288              		.cfi_offset 14, -4
 289 0002 85B0     		sub	sp, sp, #20
 290              	.LCFI6:
 291              		.cfi_def_cfa_offset 32
 292              	.LVL10:
 222:Src/main.c    ****   uint8_t status = 0;
 223:Src/main.c    ****   uint8_t spi_txbuf[2];
 224:Src/main.c    ****   uint8_t spi_rxbuf[2];
 225:Src/main.c    **** 
 226:Src/main.c    ****   spi_txbuf[0] = W_REGISTER | (REGISTER_MASK & reg);
 293              		.loc 1 226 0
 294 0004 03AC     		add	r4, sp, #12
 295 0006 1F23     		movs	r3, #31
 296 0008 1840     		ands	r0, r3
 297              	.LVL11:
 298 000a 2023     		movs	r3, #32
 299 000c 1843     		orrs	r0, r3
 300 000e 2070     		strb	r0, [r4]
 227:Src/main.c    ****   spi_txbuf[1] = value;
 301              		.loc 1 227 0
 302 0010 6170     		strb	r1, [r4, #1]
 228:Src/main.c    **** 
 229:Src/main.c    ****   HAL_SPI_TransmitReceive(&hspi1, spi_txbuf, spi_rxbuf, 2, 1000);
 303              		.loc 1 229 0
 304 0012 02AD     		add	r5, sp, #8
 305 0014 FA23     		movs	r3, #250
 306 0016 9B00     		lsls	r3, r3, #2
 307 0018 0093     		str	r3, [sp]
 308 001a 0223     		movs	r3, #2
 309 001c 2A00     		movs	r2, r5
 310 001e 2100     		movs	r1, r4
 311              	.LVL12:
 312 0020 0248     		ldr	r0, .L9
 313 0022 FFF7FEFF 		bl	HAL_SPI_TransmitReceive
 314              	.LVL13:
 230:Src/main.c    **** 
 231:Src/main.c    ****   status = spi_rxbuf[0];
ARM GAS  /tmp/ccaBVCfC.s 			page 11


 315              		.loc 1 231 0
 316 0026 2878     		ldrb	r0, [r5]
 317              	.LVL14:
 232:Src/main.c    **** 
 233:Src/main.c    ****   return status;
 234:Src/main.c    **** }
 318              		.loc 1 234 0
 319 0028 05B0     		add	sp, sp, #20
 320              		@ sp needed
 321 002a 30BD     		pop	{r4, r5, pc}
 322              	.L10:
 323              		.align	2
 324              	.L9:
 325 002c 00000000 		.word	hspi1
 326              		.cfi_endproc
 327              	.LFE44:
 329              		.section	.text.rf_begin,"ax",%progbits
 330              		.align	1
 331              		.global	rf_begin
 332              		.syntax unified
 333              		.code	16
 334              		.thumb_func
 335              		.fpu softvfp
 337              	rf_begin:
 338              	.LFB45:
 235:Src/main.c    **** 
 236:Src/main.c    **** bool rf_begin(void)
 237:Src/main.c    **** {
 339              		.loc 1 237 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 10B5     		push	{r4, lr}
 344              	.LCFI7:
 345              		.cfi_def_cfa_offset 8
 346              		.cfi_offset 4, -8
 347              		.cfi_offset 14, -4
 348              	.LVL15:
 238:Src/main.c    ****   uint8_t setup =  0;
 239:Src/main.c    **** 
 240:Src/main.c    ****   // don't think that the two below are actually needed. Should
 241:Src/main.c    ****   // probably be removed
 242:Src/main.c    ****   
 243:Src/main.c    ****   //ce(low); csn(high);z
 244:Src/main.c    **** 
 245:Src/main.c    ****   // Must allow the radio time to settle else configuration bits will not necessarily stick.
 246:Src/main.c    ****     // This is actually only required following power up but some settling time also appears to
 247:Src/main.c    ****     // be required after resets too. For full coverage, we'll always assume the worst.
 248:Src/main.c    ****     // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
 249:Src/main.c    ****     // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure
 250:Src/main.c    ****     // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
 251:Src/main.c    ****   // delay(5);
 252:Src/main.c    ****   HAL_Delay(5);
 349              		.loc 1 252 0
 350 0002 0520     		movs	r0, #5
 351 0004 FFF7FEFF 		bl	HAL_Delay
 352              	.LVL16:
ARM GAS  /tmp/ccaBVCfC.s 			page 12


 253:Src/main.c    **** 
 254:Src/main.c    ****   // Reset NRF_CONFIG and enable 16-bit CRC.
 255:Src/main.c    ****     write_register(NRF_CONFIG, 0x0C);
 353              		.loc 1 255 0
 354 0008 0C21     		movs	r1, #12
 355 000a 0020     		movs	r0, #0
 356 000c FFF7FEFF 		bl	write_register
 357              	.LVL17:
 256:Src/main.c    **** 
 257:Src/main.c    ****    #if 0
 258:Src/main.c    **** 
 259:Src/main.c    ****     // Set 1500uS (minimum for 32B payload in ESB@250KBPS) timeouts, to make testing a little easie
 260:Src/main.c    ****     // WARNING: If this is ever lowered, either 250KBS mode with AA is broken or maximum packet
 261:Src/main.c    ****     // sizes must never be used. See documentation for a more complete explanation.
 262:Src/main.c    ****     setRetries(5, 15);
 263:Src/main.c    **** 
 264:Src/main.c    ****     // Reset value is MAX
 265:Src/main.c    ****     //setPALevel( RF24_PA_MAX ) ;
 266:Src/main.c    **** 
 267:Src/main.c    ****     // check for connected module and if this is a p nRF24l01 variant
 268:Src/main.c    ****     //
 269:Src/main.c    ****     if (setDataRate(RF24_250KBPS)) {
 270:Src/main.c    ****         p_variant = true;
 271:Src/main.c    ****     }
 272:Src/main.c    ****     setup = read_register(RF_SETUP);
 273:Src/main.c    ****     /*if( setup == 0b00001110 )     // register default for nRF24L01P
 274:Src/main.c    ****     {
 275:Src/main.c    ****       p_variant = true ;
 276:Src/main.c    ****     }*/
 277:Src/main.c    **** 
 278:Src/main.c    ****     // Then set the data rate to the slowest (and most reliable) speed supported by all
 279:Src/main.c    ****     // hardware.
 280:Src/main.c    ****     setDataRate(RF24_1MBPS);
 281:Src/main.c    **** 
 282:Src/main.c    ****     // Initialize CRC and request 2-byte (16bit) CRC
 283:Src/main.c    ****     //setCRCLength( RF24_CRC_16 ) ;
 284:Src/main.c    **** 
 285:Src/main.c    ****     // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
 286:Src/main.c    ****     toggle_features();
 287:Src/main.c    ****     write_register(FEATURE, 0);
 288:Src/main.c    ****     write_register(DYNPD, 0);
 289:Src/main.c    ****     dynamic_payloads_enabled = false;
 290:Src/main.c    **** 
 291:Src/main.c    ****     // Reset current status
 292:Src/main.c    ****     // Notice reset and flush is the last thing we do
 293:Src/main.c    ****     write_register(NRF_STATUS, _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT));
 294:Src/main.c    **** 
 295:Src/main.c    ****     // Set up default configuration.  Callers can always change it later.
 296:Src/main.c    ****     // This channel should be universally safe and not bleed over into adjacent
 297:Src/main.c    ****     // spectrum.
 298:Src/main.c    ****     setChannel(76);
 299:Src/main.c    **** 
 300:Src/main.c    ****     // Flush buffers
 301:Src/main.c    ****     flush_rx();
 302:Src/main.c    ****     flush_tx();
 303:Src/main.c    **** 
 304:Src/main.c    ****     powerUp(); //Power up by default when begin() is called
ARM GAS  /tmp/ccaBVCfC.s 			page 13


 305:Src/main.c    **** 
 306:Src/main.c    ****     // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to trans
 307:Src/main.c    ****     // PTX should use only 22uA of power
 308:Src/main.c    ****     write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~_BV(PRIM_RX));
 309:Src/main.c    **** 
 310:Src/main.c    ****     #endif
 311:Src/main.c    ****     // if setup is 0 or ff then there was no response from module
 312:Src/main.c    ****     return (setup != 0 && setup != 0xff);
 313:Src/main.c    **** 
 314:Src/main.c    **** }
 358              		.loc 1 314 0
 359 0010 0020     		movs	r0, #0
 360              		@ sp needed
 361 0012 10BD     		pop	{r4, pc}
 362              		.cfi_endproc
 363              	.LFE45:
 365              		.section	.text.main,"ax",%progbits
 366              		.align	1
 367              		.global	main
 368              		.syntax unified
 369              		.code	16
 370              		.thumb_func
 371              		.fpu softvfp
 373              	main:
 374              	.LFB40:
  72:Src/main.c    ****   /* USER CODE BEGIN 1 */
 375              		.loc 1 72 0
 376              		.cfi_startproc
 377              		@ Volatile: function does not return.
 378              		@ args = 0, pretend = 0, frame = 0
 379              		@ frame_needed = 0, uses_anonymous_args = 0
 380 0000 10B5     		push	{r4, lr}
 381              	.LCFI8:
 382              		.cfi_def_cfa_offset 8
 383              		.cfi_offset 4, -8
 384              		.cfi_offset 14, -4
  80:Src/main.c    **** 
 385              		.loc 1 80 0
 386 0002 FFF7FEFF 		bl	HAL_Init
 387              	.LVL18:
  87:Src/main.c    **** 
 388              		.loc 1 87 0
 389 0006 FFF7FEFF 		bl	SystemClock_Config
 390              	.LVL19:
  94:Src/main.c    ****   MX_SPI1_Init();
 391              		.loc 1 94 0
 392 000a FFF7FEFF 		bl	MX_GPIO_Init
 393              	.LVL20:
  95:Src/main.c    ****   /* USER CODE BEGIN 2 */
 394              		.loc 1 95 0
 395 000e FFF7FEFF 		bl	MX_SPI1_Init
 396              	.LVL21:
  97:Src/main.c    ****   /* USER CODE END 2 */
 397              		.loc 1 97 0
 398 0012 FFF7FEFF 		bl	rf_begin
 399              	.LVL22:
 400              	.L13:
ARM GAS  /tmp/ccaBVCfC.s 			page 14


 401 0016 FEE7     		b	.L13
 402              		.cfi_endproc
 403              	.LFE40:
 405              		.section	.text.Error_Handler,"ax",%progbits
 406              		.align	1
 407              		.global	Error_Handler
 408              		.syntax unified
 409              		.code	16
 410              		.thumb_func
 411              		.fpu softvfp
 413              	Error_Handler:
 414              	.LFB46:
 315:Src/main.c    **** 
 316:Src/main.c    **** /* USER CODE END 4 */
 317:Src/main.c    **** 
 318:Src/main.c    **** /**
 319:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 320:Src/main.c    ****   * @retval None
 321:Src/main.c    ****   */
 322:Src/main.c    **** void Error_Handler(void)
 323:Src/main.c    **** {
 415              		.loc 1 323 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              		@ link register save eliminated.
 324:Src/main.c    ****   /* USER CODE BEGIN Error_Handler_Debug */
 325:Src/main.c    ****   /* User can add his own implementation to report the HAL error return state */
 326:Src/main.c    **** 
 327:Src/main.c    ****   /* USER CODE END Error_Handler_Debug */
 328:Src/main.c    **** }
 420              		.loc 1 328 0
 421              		@ sp needed
 422 0000 7047     		bx	lr
 423              		.cfi_endproc
 424              	.LFE46:
 426              		.comm	hspi1,100,4
 427              		.text
 428              	.Letext0:
 429              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 430              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 431              		.file 4 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/system_stm32f0xx.h"
 432              		.file 5 "Drivers/CMSIS/Device/ST/STM32F0xx/Include/stm32f030x8.h"
 433              		.file 6 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_def.h"
 434              		.file 7 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_rcc.h"
 435              		.file 8 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_gpio.h"
 436              		.file 9 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_dma.h"
 437              		.file 10 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal_spi.h"
 438              		.file 11 "Drivers/STM32F0xx_HAL_Driver/Inc/stm32f0xx_hal.h"
 439              		.file 12 "<built-in>"
ARM GAS  /tmp/ccaBVCfC.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccaBVCfC.s:16     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccaBVCfC.s:22     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccaBVCfC.s:115    .text.MX_GPIO_Init:0000000000000070 $d
     /tmp/ccaBVCfC.s:122    .text.MX_SPI1_Init:0000000000000000 $t
     /tmp/ccaBVCfC.s:128    .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
     /tmp/ccaBVCfC.s:188    .text.MX_SPI1_Init:000000000000003c $d
                            *COM*:0000000000000064 hspi1
     /tmp/ccaBVCfC.s:194    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccaBVCfC.s:201    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccaBVCfC.s:269    .text.write_register:0000000000000000 $t
     /tmp/ccaBVCfC.s:276    .text.write_register:0000000000000000 write_register
     /tmp/ccaBVCfC.s:325    .text.write_register:000000000000002c $d
     /tmp/ccaBVCfC.s:330    .text.rf_begin:0000000000000000 $t
     /tmp/ccaBVCfC.s:337    .text.rf_begin:0000000000000000 rf_begin
     /tmp/ccaBVCfC.s:366    .text.main:0000000000000000 $t
     /tmp/ccaBVCfC.s:373    .text.main:0000000000000000 main
     /tmp/ccaBVCfC.s:406    .text.Error_Handler:0000000000000000 $t
     /tmp/ccaBVCfC.s:413    .text.Error_Handler:0000000000000000 Error_Handler

UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_SPI_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_SPI_TransmitReceive
HAL_Delay
HAL_Init
